/****
   Copyright 2005-2007, Moshe Looks and Novamente LLC

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****/

#include <cxxtest/TestSuite.h>
#include <sstream>
#include <string>
#include "moses/knobs.h"

using namespace moses;
using namespace reduct;
using namespace combo;
using namespace util;
using namespace std;

class knob_turning_test : public CxxTest::TestSuite {
public:
  vtree totree(string str) {
    stringstream ss(str);
    vtree tr;
    ss >> tr;
    return tr;
  }

  void check(vtree tr,string str) {
    clean_reduce(tr);
    logical_reduce(tr);

    vtree xx=totree(str);
    logical_reduce(xx);

    TS_ASSERT(tr==xx);
  }

  void test_logical() {
    string 
      tree_str="and(#1 not(#2))",

      res00="and(#1 not(#2))",
      res01="and(not(#2))",
      res02="and(not(#1) not(#2))",

      res10="and(#1 not(#2))",
      res11="and(#1)",
      res12="and(#1 #2)",

      res20="and(#1 not(#2))",
      res21="and(#1 not(#2) #3)",
      res22="and(#1 not(#2) not(#3))";
    
    vtree tr=totree(tree_str);
    reduct::logical_reduce(tr);

    vtree t1(argument(1)),t2(argument(2)),t3(argument(3));
    logical_subtree_knob 
      k1(tr,tr.begin(),t1.begin()),
      k2(tr,tr.begin(),t2.begin()),
      k3(tr,tr.begin(),t3.begin());

    k1.turn(0);
    check(tr,res00);
    k1.turn(1);
    check(tr,res01);
    k1.turn(2);
    check(tr,res02);
    k1.turn(0);

    k2.turn(0);
    check(tr,res10);
    k2.turn(1);
    check(tr,res11);
    k2.turn(2);
    check(tr,res12);
    k2.turn(0);

    k3.turn(0);
    check(tr,res20);
    k3.turn(1);
    check(tr,res21);
    k3.turn(2);
    check(tr,res22);
    k3.turn(0);
  }
};
